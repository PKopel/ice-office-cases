# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `CaseOffice.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module CaseOffice
_M_CaseOffice = Ice.openModule('CaseOffice')
__name__ = 'CaseOffice'

if 'CaseType' not in _M_CaseOffice.__dict__:
    _M_CaseOffice.CaseType = Ice.createTempClass()
    class CaseType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    CaseType.ConstructionPermission = CaseType("ConstructionPermission", 0)
    CaseType.DrivingLicense = CaseType("DrivingLicense", 1)
    CaseType.PassportRequest = CaseType("PassportRequest", 2)
    CaseType._enumerators = { 0:CaseType.ConstructionPermission, 1:CaseType.DrivingLicense, 2:CaseType.PassportRequest }

    _M_CaseOffice._t_CaseType = IcePy.defineEnum('::CaseOffice::CaseType', CaseType, (), CaseType._enumerators)

    _M_CaseOffice.CaseType = CaseType
    del CaseType

if 'CaseAck' not in _M_CaseOffice.__dict__:
    _M_CaseOffice.CaseAck = Ice.createTempClass()
    class CaseAck(object):
        def __init__(self, caseID='', expectedReplyTime=0):
            self.caseID = caseID
            self.expectedReplyTime = expectedReplyTime

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.caseID)
            _h = 5 * _h + Ice.getHash(self.expectedReplyTime)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_CaseOffice.CaseAck):
                return NotImplemented
            else:
                if self.caseID is None or other.caseID is None:
                    if self.caseID != other.caseID:
                        return (-1 if self.caseID is None else 1)
                else:
                    if self.caseID < other.caseID:
                        return -1
                    elif self.caseID > other.caseID:
                        return 1
                if self.expectedReplyTime is None or other.expectedReplyTime is None:
                    if self.expectedReplyTime != other.expectedReplyTime:
                        return (-1 if self.expectedReplyTime is None else 1)
                else:
                    if self.expectedReplyTime < other.expectedReplyTime:
                        return -1
                    elif self.expectedReplyTime > other.expectedReplyTime:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_CaseOffice._t_CaseAck)

        __repr__ = __str__

    _M_CaseOffice._t_CaseAck = IcePy.defineStruct('::CaseOffice::CaseAck', CaseAck, (), (
        ('caseID', (), IcePy._t_string),
        ('expectedReplyTime', (), IcePy._t_long)
    ))

    _M_CaseOffice.CaseAck = CaseAck
    del CaseAck

if 'CaseResult' not in _M_CaseOffice.__dict__:
    _M_CaseOffice.CaseResult = Ice.createTempClass()
    class CaseResult(object):
        def __init__(self, caseID='', result=''):
            self.caseID = caseID
            self.result = result

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.caseID)
            _h = 5 * _h + Ice.getHash(self.result)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_CaseOffice.CaseResult):
                return NotImplemented
            else:
                if self.caseID is None or other.caseID is None:
                    if self.caseID != other.caseID:
                        return (-1 if self.caseID is None else 1)
                else:
                    if self.caseID < other.caseID:
                        return -1
                    elif self.caseID > other.caseID:
                        return 1
                if self.result is None or other.result is None:
                    if self.result != other.result:
                        return (-1 if self.result is None else 1)
                else:
                    if self.result < other.result:
                        return -1
                    elif self.result > other.result:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_CaseOffice._t_CaseResult)

        __repr__ = __str__

    _M_CaseOffice._t_CaseResult = IcePy.defineStruct('::CaseOffice::CaseResult', CaseResult, (), (
        ('caseID', (), IcePy._t_string),
        ('result', (), IcePy._t_string)
    ))

    _M_CaseOffice.CaseResult = CaseResult
    del CaseResult

if '_t_AdditionalData' not in _M_CaseOffice.__dict__:
    _M_CaseOffice._t_AdditionalData = IcePy.defineDictionary('::CaseOffice::AdditionalData', (), IcePy._t_string, IcePy._t_string)

if 'CaseRequest' not in _M_CaseOffice.__dict__:
    _M_CaseOffice.CaseRequest = Ice.createTempClass()
    class CaseRequest(object):
        def __init__(self, applicantID='', caseType=_M_CaseOffice.CaseType.ConstructionPermission, additionalData=None):
            self.applicantID = applicantID
            self.caseType = caseType
            self.additionalData = additionalData

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_CaseOffice.CaseRequest):
                return NotImplemented
            else:
                if self.applicantID != other.applicantID:
                    return False
                if self.caseType != other.caseType:
                    return False
                if self.additionalData != other.additionalData:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_CaseOffice._t_CaseRequest)

        __repr__ = __str__

    _M_CaseOffice._t_CaseRequest = IcePy.defineStruct('::CaseOffice::CaseRequest', CaseRequest, (), (
        ('applicantID', (), IcePy._t_string),
        ('caseType', (), _M_CaseOffice._t_CaseType),
        ('additionalData', (), _M_CaseOffice._t_AdditionalData)
    ))

    _M_CaseOffice.CaseRequest = CaseRequest
    del CaseRequest

if '_t_CaseResults' not in _M_CaseOffice.__dict__:
    _M_CaseOffice._t_CaseResults = IcePy.defineSequence('::CaseOffice::CaseResults', (), _M_CaseOffice._t_CaseResult)

_M_CaseOffice._t_Applicant = IcePy.defineValue('::CaseOffice::Applicant', Ice.Value, -1, (), False, True, None, ())

if 'ApplicantPrx' not in _M_CaseOffice.__dict__:
    _M_CaseOffice.ApplicantPrx = Ice.createTempClass()
    class ApplicantPrx(Ice.ObjectPrx):

        def receiveResults(self, caseResults, context=None):
            return _M_CaseOffice.Applicant._op_receiveResults.invoke(self, ((caseResults, ), context))

        def receiveResultsAsync(self, caseResults, context=None):
            return _M_CaseOffice.Applicant._op_receiveResults.invokeAsync(self, ((caseResults, ), context))

        def begin_receiveResults(self, caseResults, _response=None, _ex=None, _sent=None, context=None):
            return _M_CaseOffice.Applicant._op_receiveResults.begin(self, ((caseResults, ), _response, _ex, _sent, context))

        def end_receiveResults(self, _r):
            return _M_CaseOffice.Applicant._op_receiveResults.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_CaseOffice.ApplicantPrx.ice_checkedCast(proxy, '::CaseOffice::Applicant', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_CaseOffice.ApplicantPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::CaseOffice::Applicant'
    _M_CaseOffice._t_ApplicantPrx = IcePy.defineProxy('::CaseOffice::Applicant', ApplicantPrx)

    _M_CaseOffice.ApplicantPrx = ApplicantPrx
    del ApplicantPrx

    _M_CaseOffice.Applicant = Ice.createTempClass()
    class Applicant(Ice.Object):

        def ice_ids(self, current=None):
            return ('::CaseOffice::Applicant', '::Ice::Object')

        def ice_id(self, current=None):
            return '::CaseOffice::Applicant'

        @staticmethod
        def ice_staticId():
            return '::CaseOffice::Applicant'

        def receiveResults(self, caseResults, current=None):
            raise NotImplementedError("servant method 'receiveResults' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_CaseOffice._t_ApplicantDisp)

        __repr__ = __str__

    _M_CaseOffice._t_ApplicantDisp = IcePy.defineClass('::CaseOffice::Applicant', Applicant, (), None, ())
    Applicant._ice_type = _M_CaseOffice._t_ApplicantDisp

    Applicant._op_receiveResults = IcePy.Operation('receiveResults', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_CaseOffice._t_CaseResults, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_CaseOffice.Applicant = Applicant
    del Applicant

_M_CaseOffice._t_Office = IcePy.defineValue('::CaseOffice::Office', Ice.Value, -1, (), False, True, None, ())

if 'OfficePrx' not in _M_CaseOffice.__dict__:
    _M_CaseOffice.OfficePrx = Ice.createTempClass()
    class OfficePrx(Ice.ObjectPrx):

        def makeCaseRequest(self, caseRequest, context=None):
            return _M_CaseOffice.Office._op_makeCaseRequest.invoke(self, ((caseRequest, ), context))

        def makeCaseRequestAsync(self, caseRequest, context=None):
            return _M_CaseOffice.Office._op_makeCaseRequest.invokeAsync(self, ((caseRequest, ), context))

        def begin_makeCaseRequest(self, caseRequest, _response=None, _ex=None, _sent=None, context=None):
            return _M_CaseOffice.Office._op_makeCaseRequest.begin(self, ((caseRequest, ), _response, _ex, _sent, context))

        def end_makeCaseRequest(self, _r):
            return _M_CaseOffice.Office._op_makeCaseRequest.end(self, _r)

        def checkCaseResults(self, applicantID, applicant, context=None):
            return _M_CaseOffice.Office._op_checkCaseResults.invoke(self, ((applicantID, applicant), context))

        def checkCaseResultsAsync(self, applicantID, applicant, context=None):
            return _M_CaseOffice.Office._op_checkCaseResults.invokeAsync(self, ((applicantID, applicant), context))

        def begin_checkCaseResults(self, applicantID, applicant, _response=None, _ex=None, _sent=None, context=None):
            return _M_CaseOffice.Office._op_checkCaseResults.begin(self, ((applicantID, applicant), _response, _ex, _sent, context))

        def end_checkCaseResults(self, _r):
            return _M_CaseOffice.Office._op_checkCaseResults.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_CaseOffice.OfficePrx.ice_checkedCast(proxy, '::CaseOffice::Office', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_CaseOffice.OfficePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::CaseOffice::Office'
    _M_CaseOffice._t_OfficePrx = IcePy.defineProxy('::CaseOffice::Office', OfficePrx)

    _M_CaseOffice.OfficePrx = OfficePrx
    del OfficePrx

    _M_CaseOffice.Office = Ice.createTempClass()
    class Office(Ice.Object):

        def ice_ids(self, current=None):
            return ('::CaseOffice::Office', '::Ice::Object')

        def ice_id(self, current=None):
            return '::CaseOffice::Office'

        @staticmethod
        def ice_staticId():
            return '::CaseOffice::Office'

        def makeCaseRequest(self, caseRequest, current=None):
            raise NotImplementedError("servant method 'makeCaseRequest' not implemented")

        def checkCaseResults(self, applicantID, applicant, current=None):
            raise NotImplementedError("servant method 'checkCaseResults' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_CaseOffice._t_OfficeDisp)

        __repr__ = __str__

    _M_CaseOffice._t_OfficeDisp = IcePy.defineClass('::CaseOffice::Office', Office, (), None, ())
    Office._ice_type = _M_CaseOffice._t_OfficeDisp

    Office._op_makeCaseRequest = IcePy.Operation('makeCaseRequest', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_CaseOffice._t_CaseRequest, False, 0),), (), ((), _M_CaseOffice._t_CaseAck, False, 0), ())
    Office._op_checkCaseResults = IcePy.Operation('checkCaseResults', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_CaseOffice._t_ApplicantPrx, False, 0)), (), ((), IcePy._t_long, False, 0), ())

    _M_CaseOffice.Office = Office
    del Office

# End of module CaseOffice
