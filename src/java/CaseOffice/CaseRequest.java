//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `CaseOffice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package CaseOffice;

public class CaseRequest implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public String applicantID;

    public CaseType caseType;

    public java.util.Map<java.lang.String, java.lang.String> additionalData;

    public CaseRequest()
    {
        this.applicantID = "";
        this.caseType = CaseType.ConstructionPermission;
    }

    public CaseRequest(String applicantID, CaseType caseType, java.util.Map<java.lang.String, java.lang.String> additionalData)
    {
        this.applicantID = applicantID;
        this.caseType = caseType;
        this.additionalData = additionalData;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CaseRequest r = null;
        if(rhs instanceof CaseRequest)
        {
            r = (CaseRequest)rhs;
        }

        if(r != null)
        {
            if(this.applicantID != r.applicantID)
            {
                if(this.applicantID == null || r.applicantID == null || !this.applicantID.equals(r.applicantID))
                {
                    return false;
                }
            }
            if(this.caseType != r.caseType)
            {
                if(this.caseType == null || r.caseType == null || !this.caseType.equals(r.caseType))
                {
                    return false;
                }
            }
            if(this.additionalData != r.additionalData)
            {
                if(this.additionalData == null || r.additionalData == null || !this.additionalData.equals(r.additionalData))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::CaseOffice::CaseRequest");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, applicantID);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, caseType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, additionalData);
        return h_;
    }

    public CaseRequest clone()
    {
        CaseRequest c = null;
        try
        {
            c = (CaseRequest)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.applicantID);
        CaseType.ice_write(ostr, this.caseType);
        AdditionalDataHelper.write(ostr, this.additionalData);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.applicantID = istr.readString();
        this.caseType = CaseType.ice_read(istr);
        this.additionalData = AdditionalDataHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CaseRequest v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CaseRequest ice_read(com.zeroc.Ice.InputStream istr)
    {
        CaseRequest v = new CaseRequest();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CaseRequest> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CaseRequest v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CaseRequest> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CaseRequest.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CaseRequest _nullMarshalValue = new CaseRequest();

    /** @hidden */
    public static final long serialVersionUID = 3331808712479232169L;
}
